metadata:
  resource:
    group: kubedb.com
    version: v1alpha2
    name: mysqls
    kind: MySQL
    scope: Namespaced
  release:
    name: RELEASE-NAME
    namespace: default
resources:
  certManagerIoIssuer_ca: # +doc-gen:break
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: mysql-ca
      namespace: demo
    spec:
      ca:
        secretName: mysql-ca
  kubedbComMySQL: # +doc-gen:break
    apiVersion: kubedb.com/v1alpha2
    kind: MySQL
    metadata:
      name: mysql
      namespace: demo
    spec:
      authSecret:
        name: mysql-auth
      configSecret:
        name: mysql-config
      monitor:
        agent: prometheus.io
        prometheus:
          exporter:
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 100m
                memory: 128Mi
      podTemplate:
        spec:
          args:
            - --character-set-server=utf8mb4
          env:
            - name: MYSQL_DATABASE
              value: myDB
          resources:
            requests:
              cpu: 250m
              memory: 1Gi
      replicas: 3
      requireSSL: true
      storage:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard
      storageType: Durable
      terminationPolicy: Halt
      tls:
        certificates:
          - alias: server
            dnsNames:
              - localhost
            ipAddresses:
              - 127.0.0.1
            subject:
              organizations:
                - kubedb:server
        issuerRef:
          apiGroup: cert-manager.io
          kind: Issuer
          name: mysql-ca
      topology:
        group:
          name: dc002fc3-c412-4d18-b1d4-66c1fbfbbc9b
        mode: GroupReplication
      version: 8.0.23-v1
  monitoringCoreosComPrometheusRule: # +doc-gen:break
    apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    metadata:
      name: mysql
      namespace: demo
    spec:
      groups:
        - name: mysql.database.default.release-name.rules
          rules:
            - alert: MySQLInstanceDown
              annotations:
                description: |-
                  MySQL instance is down on {{ $labels.pod }}
                    VALUE = {{ $value }}
                    LABELS = {{ $labels }}
                summary: MySQL instance down (instance {{ $labels.pod }})
              expr: mysql_up{job="release-name-stats",namespace="default"} == 0
              for: 0m
              labels:
                k8s-group: kubedb.com
                k8s-kind: MySQL
                k8s-name: release-name
                k8s-namespace: default
                k8s-resource: mysqls
                severity: critical
  monitoringCoreosComServiceMonitor: # +doc-gen:break
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: mysql
      namespace: demo
    spec:
      endpoints:
        - honorLabels: true
          interval: 30s
          path: /metrics
          port: metrics
      namespaceSelector:
        matchNames:
          - demo
      selector:
        matchLabels:
          app.kubernetes.io/instance: mysql
          app.kubernetes.io/name: mysqls.kubedb.com
  secret_auth: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: mysql-auth
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: root
    type: Opaque
  secret_config: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: mysql-config
      namespace: demo
    stringData:
      my-config.cnf: |
        [mysqld]
        max_connections = 200
        read_buffer_size = 1048576
    type: Opaque
  stashAppscodeComBackupConfiguration: # +doc-gen:break
    apiVersion: stash.appscode.com/v1beta1
    kind: BackupConfiguration
    metadata:
      name: mysql
      namespace: demo
    spec:
      repository:
        name: mysql-repo
      retentionPolicy:
        keepLast: 5
        name: keep-last-5
        prune: true
      schedule: '*/5 * * * *'
      target:
        ref:
          apiVersion: appcatalog.appscode.com/v1alpha1
          kind: AppBinding
          name: mysql
  stashAppscodeComRepository_init_repo: # +doc-gen:break
    apiVersion: stash.appscode.com/v1alpha1
    kind: Repository
    metadata:
      name: mysql-init-repo
      namespace: demo
    spec:
      backend:
        gcs:
          bucket: stash-testing
          prefix: /demo/mysql/mysql
        storageSecretName: gcs-secret
  stashAppscodeComRepository_repo: # +doc-gen:break
    apiVersion: stash.appscode.com/v1alpha1
    kind: Repository
    metadata:
      name: mysql-repo
      namespace: demo
    spec:
      backend:
        gcs:
          bucket: stash-testing
          prefix: /demo/mysql/mysql
        storageSecretName: gcs-secret
  stashAppscodeComRestoreSession_init: # +doc-gen:break
    apiVersion: stash.appscode.com/v1beta1
    kind: RestoreSession
    metadata:
      name: mysql-init
      namespace: demo
    spec:
      repository:
        name: mysql-init-repo
      rules:
        - snapshots:
            - latest
      target:
        ref:
          apiVersion: appcatalog.appscode.com/v1alpha1
          kind: AppBinding
          name: mysql
      task:
        name: mysql-restore-8.0.21
