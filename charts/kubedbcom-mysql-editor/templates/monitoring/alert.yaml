{{ $app := (include "kubedbcom-mysql-editor.fullname" .) }}

{{ if (include "kubedbcom-mysql-editor.alertsEnabled" .Values.form.alert.enabled) }}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ $app }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    {{- include "kubedbcom-mysql-editor.selectorLabels" . | nindent 4 }}
{{- if .Values.form.alert.labels }}
    {{- toYaml .Values.form.alert.labels | nindent 4 }}
{{- end }}
{{- if .Values.form.alert.annotations }}
  annotations:
    {{- toYaml .Values.form.alert.annotations | nindent 4 }}
{{- end }}
spec:
  groups:
  {{ with .Values.form.alert.groups.database -}}
  {{ if (include "kubedbcom-mysql-editor.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: mysql.database.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlInstanceDown.enabled .rules.mysqlInstanceDown.severity)) -}}
    - alert: MySQLInstanceDown
      expr: mysql_up{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} == 0
      for: {{ .rules.mysqlInstanceDown.duration }}
      labels:
        severity: {{ .rules.mysqlInstanceDown.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL instance down (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL instance is down on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlServiceDown.enabled .rules.mysqlServiceDown.severity)) -}}
    - alert: MySQLServiceDown
      expr: sum by (service) (mysql_up{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}) == 0
      for: {{ .rules.mysqlServiceDown.duration }}
      labels:
        severity: {{ .rules.mysqlServiceDown.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL service down (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL service is down on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlTooManyConnections.enabled .rules.mysqlTooManyConnections.severity)) -}}
    - alert: MySQLTooManyConnections
      expr: max_over_time(mysql_global_status_threads_connected{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) / mysql_global_variables_max_connections{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} * 100 > {{.rules.mysqlTooManyConnections.val}}
      for: {{ .rules.mysqlTooManyConnections.duration }}
      labels:
        severity: {{ .rules.mysqlTooManyConnections.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL too many connections (> {{.rules.mysqlTooManyConnections.val}}%) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "More than {{.rules.mysqlTooManyConnections.val}}% of MySQL connections are in use on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlHighThreadsRunning.enabled .rules.mysqlHighThreadsRunning.severity)) -}}
    - alert: MySQLHighThreadsRunning
      expr: max_over_time(mysql_global_status_threads_running{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) / mysql_global_variables_max_connections{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} * 100 > {{.rules.mysqlHighThreadsRunning.val}}
      for: {{ .rules.mysqlHighThreadsRunning.duration }}
      labels:
        severity: {{ .rules.mysqlHighThreadsRunning.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL high threads running (> {{.rules.mysqlHighThreadsRunning.val}}%) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "More than {{.rules.mysqlHighThreadsRunning.val}}% of MySQL threads are in use on {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlSlowQueries.enabled .rules.mysqlSlowQueries.severity)) -}}
    - alert: MySQLSlowQueries
      expr: increase(mysql_global_status_slow_queries{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) > 0
      for: {{ .rules.mysqlSlowQueries.duration }}
      labels:
        severity: {{ .rules.mysqlSlowQueries.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL slow queries on (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL server mysql has some new slow query.\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlInnoDBLogWaits.enabled .rules.mysqlInnoDBLogWaits.severity)) -}}
    - alert: MySQLInnoDBLogWaits
      expr: rate(mysql_global_status_innodb_log_waits{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[15m]) > {{.rules.mysqlInnoDBLogWaits.val}}
      for: {{ .rules.mysqlInnoDBLogWaits.duration }}
      labels:
        severity: {{ .rules.mysqlInnoDBLogWaits.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL InnoDB log waits (> {{.rules.mysqlInnoDBLogWaits.val}}) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL innodb log writes stalling\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlRestarted.enabled .rules.mysqlRestarted.severity)) -}}
    - alert: MySQLRestarted
      expr: mysql_global_status_uptime{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} < {{.rules.mysqlRestarted.val}}
      for: {{ .rules.mysqlRestarted.duration }}
      labels:
        severity: {{ .rules.mysqlRestarted.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL restarted ({{.rules.mysqlRestarted.val}} second ago) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL restarted\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlHighQPS.enabled .rules.mysqlHighQPS.severity)) -}}
    - alert: MySQLHighQPS
      expr: rate(mysql_global_status_queries{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) > {{.rules.mysqlHighQPS.val}}
      for: {{ .rules.mysqlHighQPS.duration }}
      labels:
        severity: {{ .rules.mysqlHighQPS.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL has high queries per second (> {{.rules.mysqlHighQPS.val}}) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL has high QPS on (instance {{`{{`}} $labels.pod {{`}}`}})\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlHighIncomingBytes.enabled .rules.mysqlHighIncomingBytes.severity)) -}}
    - alert: MySQLHighIncomingBytes
      expr: rate(mysql_global_status_bytes_received{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) > {{.rules.mysqlHighIncomingBytes.val}}
      for: {{ .rules.mysqlHighIncomingBytes.duration }}
      labels:
        severity: {{ .rules.mysqlHighIncomingBytes.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL has high incoming bytes second (> {{.rules.mysqlHighIncomingBytes.val}}) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL has high incoming bytes per second on (instance {{`{{`}} $labels.pod {{`}}`}})\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlHighOutgoingBytes.enabled .rules.mysqlHighOutgoingBytes.severity)) -}}
    - alert: MySQLHighOutgoingBytes
      expr: rate(mysql_global_status_bytes_sent{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) > {{.rules.mysqlHighOutgoingBytes.val}}
      for: {{ .rules.mysqlHighOutgoingBytes.duration }}
      labels:
        severity: {{ .rules.mysqlHighOutgoingBytes.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL has high outgoing bytes second (> {{.rules.mysqlHighOutgoingBytes.val}}) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL has high outgoing bytes per second on (instance {{`{{`}} $labels.pod {{`}}`}})\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlTooManyOpenFiles.enabled .rules.mysqlTooManyOpenFiles.severity)) -}}
    - alert: MySQLTooManyOpenFiles
      expr: max_over_time(mysql_global_status_open_files{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}[1m]) / mysql_global_variables_open_files_limit{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"} * 100 > {{.rules.mysqlTooManyOpenFiles.val}}
      for: {{ .rules.mysqlTooManyOpenFiles.duration }}
      labels:
        severity: {{ .rules.mysqlTooManyOpenFiles.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL too many opened files (> {{.rules.mysqlTooManyOpenFiles.val}}%) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL too many opened files on (instance {{`{{`}} $labels.pod {{`}}`}})\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.group -}}
  {{ if (include "kubedbcom-mysql-editor.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: mysql.group.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlHighReplicationDelay.enabled .rules.mysqlHighReplicationDelay.severity)) -}}
    - alert: MySQLHighReplicationDelay
      expr: max by (pod) (mysql_perf_schema_replication_group_worker_apply_time_seconds{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}) > {{.rules.mysqlHighReplicationDelay.val}}
      for: {{ .rules.mysqlHighReplicationDelay.duration }}
      labels:
        severity: {{ .rules.mysqlHighReplicationDelay.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Group Replication delay too high ( > {{.rules.mysqlHighReplicationDelay.val}} second) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL Group Replication delay too high {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlHighReplicationTransportTime.enabled .rules.mysqlHighReplicationTransportTime.severity)) -}}
    - alert: MySQLHighReplicationTransportTime
      expr: max by (pod) (mysql_perf_schema_replication_group_worker_transport_time_seconds{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}) > {{.rules.mysqlHighReplicationTransportTime.val}}
      for: {{ .rules.mysqlHighReplicationTransportTime.duration }}
      labels:
        severity: {{ .rules.mysqlHighReplicationTransportTime.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Group Replication transport time too high ( > {{.rules.mysqlHighReplicationTransportTime.val}} second) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL Group Replication transport time too high {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlHighReplicationApplyTime.enabled .rules.mysqlHighReplicationApplyTime.severity)) -}}
    - alert: MySQLHighReplicationApplyTime
      expr: max by (pod) (mysql_perf_schema_replication_group_worker_apply_time_seconds{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}) > {{.rules.mysqlHighReplicationApplyTime.val}}
      for: {{ .rules.mysqlHighReplicationApplyTime.duration }}
      labels:
        severity: {{ .rules.mysqlHighReplicationApplyTime.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Group Replication apply time too high ( > {{.rules.mysqlHighReplicationApplyTime.val}} second) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL Group Replication apply time too high {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.mysqlReplicationHighTransactionTime.enabled .rules.mysqlReplicationHighTransactionTime.severity)) -}}
    - alert: MySQLReplicationHighTransactionTime
      expr: max by (pod) (mysql_perf_schema_replication_group_worker_time_RL_seconds{job="{{ $app }}-stats",namespace="{{ $.Release.Namespace }}"}) > {{.rules.mysqlReplicationHighTransactionTime.val}}
      for: {{ .rules.mysqlReplicationHighTransactionTime.duration }}
      labels:
        severity: {{ .rules.mysqlReplicationHighTransactionTime.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Group Replication, Transaction time on local queue is too long ( > {{.rules.mysqlReplicationHighTransactionTime.val}} second) (instance {{`{{`}} $labels.pod {{`}}`}})
        description: "MySQL Group Replication, Transaction time on local queue is too long {{`{{`}} $labels.pod {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.provisioner -}}
  {{ if (include "kubedbcom-mysql-editor.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: mysql.provisioner.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.appPhaseNotReady.enabled .rules.appPhaseNotReady.severity)) -}}
    - alert: KubeDBMySQLPhaseNotReady
      expr: kubedb_com_mysql_status_phase{phase="NotReady",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.appPhaseNotReady.duration }}
      labels:
        severity: {{ .rules.appPhaseNotReady.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB MySQL Phase NotReady (mysql {{`{{`}} $labels.mysql {{`}}`}})
        description: "KubeDB MySQL Phase not ready on {{`{{`}} $labels.mysql {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.appPhaseCritical.enabled .rules.appPhaseCritical.severity)) -}}
    - alert: KubeDBMySQLPhaseCritical
      expr: kubedb_com_mysql_status_phase{phase="Critical",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.appPhaseCritical.duration }}
      labels:
        severity: {{ .rules.appPhaseCritical.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB MySQL Phase Critical (mysql {{`{{`}} $labels.mysql {{`}}`}})
        description: "KubeDB MySQL Phase Critical {{`{{`}} $labels.mysql {{`}}`}}\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.opsManager -}}
  {{ if (include "kubedbcom-mysql-editor.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: mysql.opsManager.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.opsRequestOnProgress.enabled .rules.opsRequestOnProgress.severity)) -}}
    - alert: KubeDBMySQLOpsRequestOnProgress
      expr: ops_kubedb_com_mysqlopsrequest_status_phase{phase="Progressing",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.opsRequestOnProgress.duration }}
      labels:
        severity: {{ .rules.opsRequestOnProgress.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQLOpsRequest on progress (mysqlopsrequest {{`{{`}} $labels.mysqlopsrequest {{`}}`}})
        description: "MySQLOpsRequest {{`{{`}} $labels.mysqlopsrequest {{`}}`}} is in progressressing status\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.opsRequestStatusProgressingToLong.enabled .rules.opsRequestStatusProgressingToLong.severity)) -}}
    - alert: KubeDBMySQLOpsRequestStatusProgressingToLong
      expr: ops_kubedb_com_mysqlopsrequest_status_phase{phase="Progressing",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.opsRequestStatusProgressingToLong.duration }}
      labels:
        severity: {{ .rules.opsRequestStatusProgressingToLong.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQLOpsRequest is in progressing status for too long (mysqlopsrequest {{`{{`}} $labels.mysqlopsrequest {{`}}`}})
        description: "MySQLOpsRequest {{`{{`}} $labels.mysqlopsrequest {{`}}`}} is in progressing status for too long\n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.opsRequestFailed.enabled .rules.opsRequestFailed.severity)) -}}
    - alert: KubeDBMySQLOpsRequestFailed
      expr: ops_kubedb_com_mysqlopsrequest_status_phase{phase="Failed",app="{{ $app }}",namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.opsRequestFailed.duration }}
      labels:
        severity: {{ .rules.opsRequestFailed.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQLOpsRequest failed (mysqlopsrequest {{`{{`}} $labels.mysqlopsrequest {{`}}`}})
        description: "MySQLOpsRequest {{`{{`}} $labels.mysqlopsrequest {{`}}`}} failed \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.stash -}}
  {{ if (include "kubedbcom-mysql-editor.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: mysql.stash.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.backupSessionFailed.enabled .rules.backupSessionFailed.severity)) -}}
    - alert: MySQLStashBackupSessionFailed
      expr: stash_backup_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} == 0
      for: {{ .rules.backupSessionFailed.duration }}
      labels:
        severity: {{ .rules.backupSessionFailed.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Stash backup session failed (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "MySQL Stash backupsession failed {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.restoreSessionFailed.enabled .rules.restoreSessionFailed.severity)) -}}
    - alert: MySQLStashRestoreSessionFailed
      expr: stash_restore_session_success * on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_restoresession_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} == 0
      for: {{ .rules.restoreSessionFailed.duration }}
      labels:
        severity: {{ .rules.restoreSessionFailed.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Stash restore session failed (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "MySQL Stash restore session failed {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.noBackupSessionForTooLong.enabled .rules.noBackupSessionForTooLong.severity)) -}}
    - alert: MySQLStashNoBackupSessionForTooLong
      expr: time() - stash_backup_last_success_time_seconds + on(invoker_name, invoker_kind) group_left(target_name, target_kind) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} - 1 > {{ .rules.noBackupSessionForTooLong.val }}
      for: {{ .rules.noBackupSessionForTooLong.duration }}
      labels:
        severity: {{ .rules.noBackupSessionForTooLong.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Stash no backup for last {{ .rules.noBackupSessionForTooLong.val }} second (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "MySQL Stash no backup for too long {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.repositoryCorrupted.enabled .rules.repositoryCorrupted.severity)) -}}
    - alert: MySQLStashRepositoryCorrupted
      expr: stash_repository_integrity * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"}
      for: {{ .rules.repositoryCorrupted.duration }}
      labels:
        severity: {{ .rules.repositoryCorrupted.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Stash repository corrupted (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "MySQL Stash repository corrupted {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.repositoryStorageRunningLow.enabled .rules.repositoryStorageRunningLow.severity)) -}}
    - alert: MySQLStashRepositoryStorageRunningLow
      expr: stash_repository_size_bytes * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} > {{ .rules.repositoryStorageRunningLow.val }}
      for: {{ .rules.repositoryStorageRunningLow.duration }}
      labels:
        severity: {{ .rules.repositoryStorageRunningLow.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: MySQL Stash Repository storage more than {{ .rules.repositoryStorageRunningLow.val }} byte. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "MySQL Stash Repository storage running low {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.backupSessionPeriodTooLong.enabled .rules.backupSessionPeriodTooLong.severity)) -}}
    - alert: MySQLStashBackupSessionPeriodTooLong
      expr: stash_backup_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_backupconfiguration_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} > {{ .rules.backupSessionPeriodTooLong.val }}
      for: {{ .rules.backupSessionPeriodTooLong.duration }}
      labels:
        severity: {{ .rules.backupSessionPeriodTooLong.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary:  MySQL Stash backup session took more than {{ .rules.backupSessionPeriodTooLong.val }} second to complete. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "MySQL Stash backup session taking to long to complete {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.restoreSessionPeriodTooLong.enabled .rules.restoreSessionPeriodTooLong.severity)) -}}
    - alert: MySQLStashRestoreSessionPeriodTooLong
      expr: stash_restore_session_duration_seconds * on(invoker_name, invoker_kind) group_left(target_name, target_kind, repository) stash_appscode_com_restoresession_info{target_name="{{ $app }}", target_kind="AppBinding", namespace="{{ $.Release.Namespace }}"} > {{ .rules.restoreSessionPeriodTooLong.val }}
      for: {{ .rules.restoreSessionPeriodTooLong.duration }}
      labels:
        severity: {{ .rules.restoreSessionPeriodTooLong.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary:  MySQL Stash restore session took more than {{ .rules.restoreSessionPeriodTooLong.val }} second to complete. (invoker_name {{`{{`}} $labels.invoker_name {{`}}`}})
        description: "MySQL Stash restore session taking to long to complete {{`{{`}} $labels.invoker_name {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}


  {{ with .Values.form.alert.groups.schemaManager -}}
  {{ if (include "kubedbcom-mysql-editor.alertGroupEnabled" (list $.Values.form.alert.enabled .)) -}}
  - name: mysql.schemaManager.{{ $.Release.Namespace }}.{{ $app }}.rules
    rules:
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.schemaPendingForTooLong.enabled .rules.schemaPendingForTooLong.severity)) -}}
    - alert: KubeDBMySQLSchemaPendingForTooLong
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="Pending",app="{{ $app }}",app_namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.schemaPendingForTooLong.duration }}
      labels:
        severity: {{ .rules.schemaPendingForTooLong.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB schema pending for too long for (mysqldatabase {{`{{`}} $labels.mysqldatabase {{`}}`}})
        description: "KubeDB schema pending for too long.\n {{`{{`}} $labels.mysqldatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.schemaInProgressForTooLong.enabled .rules.schemaInProgressForTooLong.severity)) -}}
    - alert: KubeDBMySQLSchemaInProgressForTooLong
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="InProgress",app="{{ $app }}",app_namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.schemaInProgressForTooLong.duration }}
      labels:
        severity: {{ .rules.schemaInProgressForTooLong.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB schema is in progress for too long for (mysqldatabase {{`{{`}} $labels.mysqldatabase {{`}}`}})
        description: "KubeDB schema is in progress for too long.\n {{`{{`}} $labels.mysqldatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.schemaTerminatingForTooLong.enabled .rules.schemaTerminatingForTooLong.severity)) -}}
    - alert: KubeDBMySQLSchemaTerminatingForTooLong
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="Terminating",app="{{ $app }}",app_namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.schemaTerminatingForTooLong.duration }}
      labels:
        severity: {{ .rules.schemaTerminatingForTooLong.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB schema terminating for too long for (mysqldatabase {{`{{`}} $labels.mysqldatabase {{`}}`}})
        description: "KubeDB schema terminating for too long.\n {{`{{`}} $labels.mysqldatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.schemaFailed.enabled .rules.schemaFailed.severity)) -}}
    - alert: KubeDBMySQLSchemaFailed
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="Failed",app="{{ $app }}",app_namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.schemaFailed.duration }}
      labels:
        severity: {{ .rules.schemaFailed.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB schema failed for (mysqldatabase {{`{{`}} $labels.mysqldatabase {{`}}`}})
        description: "KubeDB schema failed.\n {{`{{`}} $labels.mysqldatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{ end -}}
    {{ if (include "kubedbcom-mysql-editor.alertEnabled" (list $.Values.form.alert.enabled .enabled .rules.schemaExpired.enabled .rules.schemaExpired.severity)) -}}
    - alert: KubeDBMySQLSchemaExpired
      expr: schema_kubedb_com_mysqldatabase_status_phase{phase="Expired",app="{{ $app }}",app_namespace="{{ $.Release.Namespace }}"} == 1
      for: {{ .rules.schemaExpired.duration }}
      labels:
        severity: {{ .rules.schemaExpired.severity }}
        {{- include "kubedbcom-mysql-editor.alertLabels" $ | nindent 8 }}
      annotations:
        summary: KubeDB schema expired for (mysqldatabase {{`{{`}} $labels.mysqldatabase {{`}}`}})
        description: "KubeDB schema expired.\n {{`{{`}} $labels.mysqldatabase {{`}}`}} \n  VALUE = {{`{{`}} $value {{`}}`}}\n  LABELS = {{`{{`}} $labels {{`}}`}}"
    {{- end }}
  {{ end -}}
  {{ end -}}

{{ end }}
