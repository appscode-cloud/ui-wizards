form:
  alert:
    additionalRuleLabels: {}
    annotations: {}
    enabled: warning
    groups:
      cluster:
        enabled: warning
        rules:
          galeraReplicationLatencyTooLong:
            duration: 5m
            enabled: true
            severity: warning
            val: 0.1
      database:
        enabled: warning
        rules:
          mysqlHighIncomingBytes:
            duration: 0m
            enabled: true
            severity: critical
            val: 1.048576e+06
          mysqlHighOutgoingBytes:
            duration: 0m
            enabled: true
            severity: critical
            val: 1.048576e+06
          mysqlHighQPS:
            duration: 0m
            enabled: true
            severity: critical
            val: 1000
          mysqlHighThreadsRunning:
            duration: 2m
            enabled: true
            severity: warning
            val: 60
          mysqlInnoDBLogWaits:
            duration: 0m
            enabled: true
            severity: warning
            val: 10
          mysqlInstanceDown:
            duration: 0m
            enabled: true
            severity: critical
          mysqlRestarted:
            duration: 0m
            enabled: true
            severity: warning
            val: 60
          mysqlServiceDown:
            duration: 0m
            enabled: true
            severity: critical
          mysqlSlowQueries:
            duration: 2m
            enabled: true
            severity: warning
          mysqlTooManyConnections:
            duration: 2m
            enabled: true
            severity: warning
            val: 80
          mysqlTooManyOpenFiles:
            duration: 2m
            enabled: true
            severity: warning
            val: 80
      opsManager:
        enabled: warning
        rules:
          opsRequestFailed:
            duration: 0m
            enabled: true
            severity: critical
          opsRequestOnProgress:
            duration: 0m
            enabled: true
            severity: info
          opsRequestStatusProgressingToLong:
            duration: 30m
            enabled: true
            severity: critical
      provisioner:
        enabled: warning
        rules:
          appPhaseCritical:
            duration: 15m
            enabled: true
            severity: warning
          appPhaseNotReady:
            duration: 1m
            enabled: true
            severity: critical
      schemaManager:
        enabled: warning
        rules:
          schemaExpired:
            duration: 0m
            enabled: true
            severity: warning
          schemaFailed:
            duration: 0m
            enabled: true
            severity: warning
          schemaInProgressForTooLong:
            duration: 30m
            enabled: true
            severity: warning
          schemaPendingForTooLong:
            duration: 30m
            enabled: true
            severity: warning
          schemaTerminatingForTooLong:
            duration: 30m
            enabled: true
            severity: warning
      stash:
        enabled: warning
        rules:
          backupSessionFailed:
            duration: 0m
            enabled: true
            severity: critical
          backupSessionPeriodTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 1800
          noBackupSessionForTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 18000
          repositoryCorrupted:
            duration: 5m
            enabled: true
            severity: critical
          repositoryStorageRunningLow:
            duration: 5m
            enabled: true
            severity: warning
            val: 1.073741824e+10
          restoreSessionFailed:
            duration: 0m
            enabled: true
            severity: critical
          restoreSessionPeriodTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 1800
    labels:
      release: kube-prometheus-stack
metadata:
  resource:
    group: kubedb.com
    version: v1
    name: mariadbs
    kind: MariaDB
    scope: Namespaced
  release:
    name: RELEASE-NAME
    namespace: default
resources:
  autoscalingKubedbComMariaDBAutoscaler: # +doc-gen:break
    apiVersion: autoscaling.kubedb.com/v1alpha1
    kind: MariaDBAutoscaler
    metadata:
      name: mariadb
      namespace: demo
    spec:
      compute:
        mariadb:
          maxAllowed:
            cpu: 1
            memory: 2Gi
          minAllowed:
            cpu: 400m
            memory: 400Mi
          podLifeTimeThreshold: 10m
          resourceDiffPercentage: 20
          trigger: "On"
        nodeTopology:
          name: standard-basv2-family
      databaseRef:
        name: sample
      opsRequestOptions:
        apply: IfReady
        timeout: 10m
  catalogAppscodeComMariaDBBinding: # +doc-gen:break
    apiVersion: catalog.appscode.com/v1alpha1
    kind: MariaDBBinding
    metadata:
      name: mariadb
      namespace: demo
    spec:
      sourceRef:
        name: mariadb
        namespace: demo
  certManagerIoIssuer_ca: # +doc-gen:break
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: mariadb-ca
      namespace: demo
    spec:
      ca:
        secretName: mariadb-ca
  coreKubestashComBackupBlueprint: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: BackupBlueprint
    metadata:
      name: mariadb
      namespace: demo
    spec:
      backupConfigurationTemplate:
        backends:
          - name: mariadb-backend
            retentionPolicy:
              name: mariadb-retention-policy
              namespace: demo
            storageRef:
              name: mariadb-storage
              namespace: demo
        sessions:
          - addon:
              jobTemplate:
                spec:
                  securityContext:
                    runAsGroup: 0
                    runAsUser: 999
              name: mariadb-addon
              tasks:
                - name: logical-backup
            name: mariadb-frequent-backup
            repositories:
              - backend: mariadb-backend
                directory: /mariadb-repo
                encryptionSecret:
                  name: mariadb-encryption-secret
                  namespace: demo
                name: mariadb-repo
            scheduler:
              jobTemplate:
                backoffLimit: 1
              schedule: '*/5 * * * *'
            sessionHistoryLimit: 2
      usagePolicy:
        allowedNamespaces:
          from: Same
  coreKubestashComBackupConfiguration: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: BackupConfiguration
    metadata:
      name: mariadb
      namespace: demo
    spec:
      backends:
        - name: mariadb-backend
          retentionPolicy:
            name: mariadb-retention-policy
            namespace: demo
          storageRef:
            name: mariadb-storage
            namespace: demo
      sessions:
        - addon:
            jobTemplate:
              spec:
                securityContext:
                  runAsGroup: 0
                  runAsUser: 999
            name: mariadb-addon
            tasks:
              - name: logical-backup
          name: mariadb-frequent-backup
          repositories:
            - backend: mariadb-backend
              directory: /mariadb-repo
              encryptionSecret:
                name: mariadb-encryption-secret
                namespace: demo
              name: mariadb-repo
          scheduler:
            jobTemplate:
              backoffLimit: 1
            schedule: '*/5 * * * *'
          sessionHistoryLimit: 2
      target:
        apiGroup: kubedb.com
        kind: MariaDB
        name: mariadb
        namespace: demo
  coreKubestashComRestoreSession: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: RestoreSession
    metadata:
      name: mariadb
      namespace: demo
    spec:
      addon:
        jobTemplate:
          spec:
            securityContext:
              runAsGroup: 0
              runAsUser: 999
        name: mariadb-addon
        tasks:
          - name: logical-backup-restore
      dataSource:
        encryptionSecret:
          name: mariadb-encryption-secret
          namespace: demo
        repository: mariadb-repo
        snapshot: latest
      target:
        apiGroup: kubedb.com
        kind: MariaDB
        name: mariadb
        namespace: demo
  kubedbComMariaDB: # +doc-gen:break
    apiVersion: kubedb.com/v1
    kind: MariaDB
    metadata:
      name: mariadb
      namespace: demo
    spec:
      authSecret:
        name: mariadb-auth
      configSecret:
        name: mariadb-config
      deletionPolicy: WipeOut
      monitor:
        agent: prometheus.io
        prometheus:
          exporter:
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 100m
                memory: 128Mi
      podTemplate:
        spec:
          args:
            - --character-set-server=utf8mb4
          env:
            - name: MYSQL_DATABASE
              value: mdDB
          resources:
            requests:
              cpu: 250m
              memory: 1Gi
      replicas: 1
      requireSSL: true
      storage:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard
      storageType: Durable
      tls:
        certificates:
          - alias: server
            dnsNames:
              - localhost
            ipAddresses:
              - 127.0.0.1
            subject:
              organizations:
                - kubedb:server
        issuerRef:
          apiGroup: cert-manager.io
          kind: Issuer
          name: mariadb-ca
      version: 10.5.8
  monitoringCoreosComServiceMonitor: # +doc-gen:break
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: mariadb
      namespace: demo
    spec:
      endpoints:
        - honorLabels: true
          interval: 30s
          path: /metrics
          port: metrics
      namespaceSelector:
        matchNames:
          - demo
      selector:
        matchLabels:
          app.kubernetes.io/instance: mariadb
          app.kubernetes.io/name: mariadbs.kubedb.com
  secret_auth: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: mariadb-auth
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: root
    type: Opaque
  secret_config: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: mariadb-config
      namespace: demo
    stringData:
      md-config.cnf: |
        [mysqld]
        max_connections = 200
        read_buffer_size = 1048576
    type: Opaque
  secret_encryption_secret: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: mariadb-encryption-secret
      namespace: demo
    stringData:
      RESTIC_PASSWORD: ""
  secret_init_repo_cred: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: mariadb-init-repo-cred
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: root
    type: Opaque
  secret_repo_cred: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: mariadb-repo-cred
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: root
    type: Opaque
  stashAppscodeComBackupConfiguration: # +doc-gen:break
    apiVersion: stash.appscode.com/v1beta1
    kind: BackupConfiguration
    metadata:
      name: mariadb
      namespace: demo
    spec:
      repository:
        name: mariadb-repo
      retentionPolicy:
        keepLast: 5
        name: keep-last-5
        prune: true
      schedule: '*/5 * * * *'
      target:
        ref:
          apiVersion: appcatalog.appscode.com/v1alpha1
          kind: AppBinding
          name: mariadb
  stashAppscodeComRepository_init_repo: # +doc-gen:break
    apiVersion: stash.appscode.com/v1alpha1
    kind: Repository
    metadata:
      name: mariadb-init-repo
      namespace: demo
    spec:
      backend:
        gcs:
          bucket: stash-testing
          prefix: /demo/mariadb/mariadb
        storageSecretName: gcs-secret
  stashAppscodeComRepository_repo: # +doc-gen:break
    apiVersion: stash.appscode.com/v1alpha1
    kind: Repository
    metadata:
      name: mariadb-repo
      namespace: demo
    spec:
      backend:
        gcs:
          bucket: stash-testing
          prefix: /demo/mariadb/mariadb
        storageSecretName: gcs-secret
  stashAppscodeComRestoreSession_init: # +doc-gen:break
    apiVersion: stash.appscode.com/v1beta1
    kind: RestoreSession
    metadata:
      name: mariadb-init
      namespace: demo
    spec:
      repository:
        name: mariadb-init-repo
      rules:
        - snapshots:
            - latest
      target:
        ref:
          apiVersion: appcatalog.appscode.com/v1alpha1
          kind: AppBinding
          name: mariadb
      task:
        name: mariadb-restore-10.5.8
