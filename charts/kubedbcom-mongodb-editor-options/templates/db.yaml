{{- $machines := .Files.Get "data/machines.yaml" | fromYaml -}}
{{- $res := dict -}}
{{- $shard_res := dict -}}
{{- $configServer_res := dict -}}
{{- $mongos_res := dict -}}
{{- $arbiter_res := dict -}}
{{- $hidden_res := dict -}}
{{- if eq .Values.spec.mode "Sharded" }}
  {{- $shard_res = .Values.spec.shardTopology.shard.podResources.resources -}}
  {{- if and .Values.spec.shardTopology.shard.podResources.machine (hasKey $machines .Values.spec.shardTopology.shard.podResources.machine) }}
    {{- $shard_res = get (get $machines .Values.spec.shardTopology.shard.podResources.machine) "resources" }}
  {{- end }}
  {{- $configServer_res = .Values.spec.shardTopology.configServer.podResources.resources -}}
  {{- if and .Values.spec.shardTopology.configServer.podResources.machine (hasKey $machines .Values.spec.shardTopology.configServer.podResources.machine) }}
    {{- $configServer_res = get (get $machines .Values.spec.shardTopology.configServer.podResources.machine) "resources" }}
  {{- end }}
  {{- $mongos_res = .Values.spec.shardTopology.mongos.podResources.resources -}}
  {{- if and .Values.spec.shardTopology.mongos.podResources.machine (hasKey $machines .Values.spec.shardTopology.mongos.podResources.machine) }}
    {{- $mongos_res = get (get $machines .Values.spec.shardTopology.mongos.podResources.machine) "resources" }}
  {{- end }}
{{- else }}
  {{- $res = .Values.spec.podResources.resources -}}
  {{- if and .Values.spec.podResources.machine (hasKey $machines .Values.spec.podResources.machine) }}
    {{- $res = get (get $machines .Values.spec.podResources.machine) "resources" }}
  {{- end }}
{{- end }}
{{- if .Values.spec.arbiter.enabled }}
  {{- $arbiter_res = .Values.spec.arbiter.podResources.resources -}}
  {{- if and .Values.spec.arbiter.podResources.machine (hasKey $machines .Values.spec.arbiter.podResources.machine) }}
    {{- $arbiter_res = get (get $machines .Values.spec.arbiter.podResources.machine) "resources" }}
  {{- end }}
{{- end }}
{{- if .Values.spec.hidden.enabled }}
  {{- $hidden_res = .Values.spec.hidden.podResources.resources -}}
  {{- if and .Values.spec.hidden.podResources.machine (hasKey $machines .Values.spec.hidden.podResources.machine) }}
    {{- $hidden_res = get (get $machines .Values.spec.hidden.podResources.machine) "resources" }}
  {{- end }}
{{- end }}

{{- define "common.placement" -}}
{{- if .Values.spec.admin.clusterTier.placement.default }}
podPlacementPolicy:
  name: {{ .Values.spec.admin.clusterTier.placement.default }}
{{- end }}

nodeSelector:
  kubernetes.io/os: linux
{{- if .Values.spec.admin.nodeSelector }}
{{- toYaml .Values.spec.admin.nodeSelector | nindent 2 }}
{{- end }}
{{- if eq .Values.spec.admin.deployment.default "Dedicated" }}
  app: mongodbs.kubedb.com
  instance: {{ include "kubedbcom-mongodb-editor-options.fullname" . }}
  namespace: {{ .Release.Namespace }}
  nodepool: {{ .Values.spec.admin.clusterTier.nodeTopology.default }}
{{- end }}

{{- if or .Values.spec.admin.tolerations (eq .Values.spec.admin.deployment.default "Dedicated") }}
tolerations:
{{- if .Values.spec.admin.tolerations }}
{{- toYaml .Values.spec.admin.tolerations | nindent 2 }}
{{- end }}
{{- if eq .Values.spec.admin.deployment.default "Dedicated" }}
  - key: app
    operator: "Equal"
    value: "mongodbs.kubedb.com"
    effect: "NoSchedule"
  - key: instance
    operator: "Equal"
    value: {{ include "kubedbcom-mongodb-editor-options.fullname" . }}
    effect: "NoSchedule"
  - key: namespace
    operator: "Equal"
    value: {{ .Release.Namespace }}
    effect: "NoSchedule"
  - key: nodepool
    operator: "Equal"
    value: {{ .Values.spec.admin.clusterTier.nodeTopology.default }}
    effect: "NoSchedule"
{{- end }}
{{- end }}
{{- end }}

apiVersion: kubedb.com/v1
kind: MongoDB
metadata:
  name: {{ include "kubedbcom-mongodb-editor-options.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kubedbcom-mongodb-editor-options.labels" . | nindent 4 }}
{{- if .Values.spec.admin.archiver.enable.default }}
    kubedb.com/archiver: "true"
{{- end }}
  annotations:
    app.kubernetes.io/cluster-tier: {{ .Values.spec.admin.clusterTier.default }}
  {{- if and (eq .Values.spec.backup.tool "KubeStash") (.Values.spec.admin.backup.enable.default) (eq .Values.spec.admin.backup.by "BackupBlueprint") }}
    blueprint.kubestash.com/name: {{ .Values.metadata.resource.kind | lower }}-blueprint
    blueprint.kubestash.com/namespace: kubedb
  {{- end }}
{{- if .Values.spec.annotations }}
    {{- include "kubedbcom-mongodb-editor-options.annotations" . | nindent 4 }}
{{- end }}
spec:
  version: {{ .Values.spec.admin.databases.MongoDB.versions.default | quote }}
{{- if or (eq .Values.spec.mode "Standalone") (eq .Values.spec.mode "Replicaset") }}
  replicas: {{ (eq .Values.spec.mode "Replicaset") | ternary .Values.spec.replicaSet.replicas 1 }}
  storageType: Durable
  storage:
    storageClassName: {{ .Values.spec.admin.storageClasses.default }}
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: {{ .Values.spec.persistence.size }}
{{- end }}
{{- if eq .Values.spec.mode "Replicaset" }}
  replicaSet:
    name: {{ .Values.spec.replicaSet.name }}
{{- end }}
{{- if eq .Values.spec.mode "Sharded" }}
  shardTopology:
    configServer:
      replicas: {{ .Values.spec.shardTopology.configServer.replicas }}
      podTemplate:
        spec:
          securityContext:
            fsGroup: {{ .Values.spec.openshift.securityContext.runAsUser | default 999 }}
          containers:
            - name: mongodb
              resources:
                {{- toYaml $configServer_res | nindent 16 }}
              securityContext:
                {{- include "container.securityContext" . | nindent 16 }}
            - name: replication-mode-detector
              securityContext:
                {{- include "container.securityContext" . | nindent 16 }}
          initContainers:
            - name: copy-config
              securityContext:
                {{- include "container.securityContext" . | nindent 16 }}
          {{- include "common.placement" . | nindent 10 }}
      storage:
        resources:
          requests:
            storage: {{ .Values.spec.shardTopology.configServer.persistence.size }}
        storageClassName: {{ .Values.spec.admin.storageClasses.default }}
    mongos:
      replicas: {{ .Values.spec.shardTopology.mongos.replicas }}
      podTemplate:
        spec:
          securityContext:
            fsGroup: {{ .Values.spec.openshift.securityContext.runAsUser | default 999 }}
          containers:
            - name: mongodb
              resources:
                {{- toYaml $mongos_res | nindent 16 }}
              securityContext:
                {{- include "container.securityContext" . | nindent 16 }}
          initContainers:
            - name: copy-config
              securityContext:
                {{- include "container.securityContext" . | nindent 16 }}
          {{- include "common.placement" . | nindent 10 }}
    shard:
      shards: {{ .Values.spec.shardTopology.shard.shards }}
      replicas: {{ .Values.spec.shardTopology.shard.replicas }}
      podTemplate:
        spec:
          securityContext:
            fsGroup: {{ .Values.spec.openshift.securityContext.runAsUser | default 999 }}
          containers:
            - name: mongodb
              resources:
                {{- toYaml $shard_res | nindent 16 }}
              securityContext:
                {{- include "container.securityContext" . | nindent 16 }}
            - name: replication-mode-detector
              securityContext:
                {{- include "container.securityContext" . | nindent 16 }}
          initContainers:
            - name: copy-config
              securityContext:
                {{- include "container.securityContext" . | nindent 16 }}
          {{- include "common.placement" . | nindent 10 }}
      storage:
        resources:
          requests:
            storage: {{ .Values.spec.shardTopology.shard.persistence.size }}
        storageClassName: {{ .Values.spec.admin.storageClasses.default }}
{{- else }}
  podTemplate:
    spec:
      securityContext:
        fsGroup: {{ .Values.spec.openshift.securityContext.runAsUser | default 999 }}
      containers:
        - name: mongodb
          resources:
            {{- toYaml $res | nindent 12 }}
          securityContext:
            {{- include "container.securityContext" . | nindent 12 }}
          {{- if eq .Values.spec.mode "Replicaset" }}
        - name: replication-mode-detector
          securityContext:
            {{- include "container.securityContext" . | nindent 12 }}
          {{- end }}
      initContainers:
        - name: copy-config
          securityContext:
            {{- include "container.securityContext" . | nindent 12 }}
      {{- include "common.placement" . | nindent 6 }}
{{- end }}
{{- if .Values.spec.arbiter.enabled }}
  arbiter:
    podTemplate:
      spec:
        containers:
          - name: mongodb
            resources:
              {{- toYaml $arbiter_res | nindent 14 }}
            securityContext:
              {{- include "container.securityContext" . | nindent 14 }}
        initContainers:
          - name: copy-config
            securityContext:
              {{- include "container.securityContext" . | nindent 14 }}
        {{- include "common.placement" . | nindent 8 }}
{{- end }}
{{- if .Values.spec.hidden.enabled }}
  hidden:
    replicas: {{ .Values.spec.hidden.replicas }}
    podTemplate:
      spec:
        containers:
          - name: mongodb
            resources:
              {{- toYaml $hidden_res | nindent 14 }}
            securityContext:
              {{- include "container.securityContext" . | nindent 14 }}
        initContainers:
          - name: copy-config
            securityContext:
              {{- include "container.securityContext" . | nindent 14 }}
        {{- include "common.placement" . | nindent 8 }}
    storage:
      resources:
        requests:
          storage: {{ .Values.spec.hidden.persistence.size }}
      storageClassName: {{ .Values.spec.admin.storageClasses.default }}
{{- end }}
  deletionPolicy: {{ .Values.spec.deletionPolicy }}
{{- if .Values.spec.authSecret.name }}
  authSecret:
    name: {{ .Values.spec.authSecret.name }}
{{- end }}
{{- if .Values.spec.authSecret.password }}
  authSecret:
    name: {{ include "kubedbcom-mongodb-editor-options.fullname" . }}-auth
{{- end }}
{{- if .Values.spec.configuration }}
  configSecret:
    name: {{ include "kubedbcom-mongodb-editor-options.fullname" . }}-config
{{- end }}
{{- if .Values.spec.admin.tls.default }}
  tls:
    issuerRef:
      apiGroup: "cert-manager.io"
      kind: ClusterIssuer
      name: {{ .Values.spec.admin.clusterIssuers.default }}
    {{- if .Values.spec.admin.expose.default }}
    certificates:
      - alias: server
        {{- if .Values.spec.hostname }}
        dnsNames:
          - {{ .Values.spec.hostname }}
        {{- else if .Values.spec.ip }}
        ipAddresses:
          - {{ .Values.spec.ip }}
        {{- end }}
    {{- end }}
  clusterAuthMode: x509
  sslMode: requireSSL
{{- end }}
{{- if (and .Values.spec.admin.monitoring .Values.spec.admin.monitoring.agent) }}
  monitor:
    agent: {{ .Values.spec.admin.monitoring.agent }}
    prometheus:
    {{- with .Values.spec.admin.monitoring.exporter }}
      exporter:
        args:
          - --compatible-mode
        resources:
          {{- toYaml .resources | nindent 10 }}
        securityContext:
          {{- include "container.securityContext" $ | nindent 10 }}
    {{- end }}
      serviceMonitor:
        interval: 30s
        labels:
          {{- toYaml .Values.spec.monitoring.serviceMonitor.labels | nindent 10 }}
{{- end }}
{{- if (and .Values.spec.init .Values.spec.init.archiver .Values.spec.init.archiver.recoveryTimestamp) }}
  init:
    archiver:
      {{- toYaml .Values.spec.init.archiver | nindent 6 }}
{{- end }}
