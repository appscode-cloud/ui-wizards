form:
  alert:
    additionalRuleLabels: {}
    annotations: {}
    enabled: warning
    groups:
      database:
        enabled: warning
        rules:
          postgresExporterError:
            duration: 5m
            enabled: true
            severity: warning
          postgresHighRollbackRate:
            duration: 0m
            enabled: true
            severity: warning
            val: 0.02
          postgresInstanceDown:
            duration: 0m
            enabled: true
            severity: critical
          postgresNotEnoughConnections:
            duration: 2m
            enabled: true
            severity: warning
            val: 5
          postgresReplicationLag:
            duration: 0m
            enabled: true
            severity: critical
            val: 30s
          postgresRestarted:
            duration: 0m
            enabled: true
            severity: critical
            val: 60
          postgresSlowQueries:
            duration: 2m
            enabled: true
            severity: warning
          postgresSplitBrain:
            duration: 0m
            enabled: true
            severity: critical
          postgresTooManyConnections:
            duration: 2m
            enabled: true
            severity: warning
            val: 80
          postgresTooManyLocksAcquired:
            duration: 2m
            enabled: true
            severity: critical
            val: 0.2
      opsManager:
        enabled: warning
        rules:
          opsRequestFailed:
            duration: 0m
            enabled: true
            severity: critical
          opsRequestOnProgress:
            duration: 0m
            enabled: true
            severity: info
          opsRequestStatusProgressingToLong:
            duration: 30m
            enabled: true
            severity: critical
      provisioner:
        enabled: warning
        rules:
          appPhaseCritical:
            duration: 15m
            enabled: true
            severity: warning
          appPhaseNotReady:
            duration: 1m
            enabled: true
            severity: critical
      schemaManager:
        enabled: warning
        rules:
          schemaExpired:
            duration: 0m
            enabled: true
            severity: warning
          schemaFailed:
            duration: 0m
            enabled: true
            severity: warning
          schemaInProgressForTooLong:
            duration: 30m
            enabled: true
            severity: warning
          schemaPendingForTooLong:
            duration: 30m
            enabled: true
            severity: warning
          schemaTerminatingForTooLong:
            duration: 30m
            enabled: true
            severity: warning
      stash:
        enabled: warning
        rules:
          backupSessionFailed:
            duration: 0m
            enabled: true
            severity: critical
          backupSessionPeriodTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 1800
          noBackupSessionForTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 18000
          repositoryCorrupted:
            duration: 5m
            enabled: true
            severity: critical
          repositoryStorageRunningLow:
            duration: 5m
            enabled: true
            severity: warning
            val: 1.073741824e+10
          restoreSessionFailed:
            duration: 0m
            enabled: true
            severity: critical
          restoreSessionPeriodTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 1800
    labels:
      release: kube-prometheus-stack
metadata:
  resource:
    group: kubedb.com
    version: v1
    name: postgreses
    kind: Postgres
    scope: Namespaced
  release:
    name: RELEASE-NAME
    namespace: default
resources:
  autoscalingKubedbComPostgresAutoscaler: # +doc-gen:break
    apiVersion: autoscaling.kubedb.com/v1alpha1
    kind: PostgresAutoscaler
    metadata:
      name: postgres
      namespace: demo
    spec:
      compute:
        nodeTopology:
          name: standard-basv2-family
        postgres:
          maxAllowed:
            cpu: 1
            memory: 2Gi
          minAllowed:
            cpu: 400m
            memory: 400Mi
          podLifeTimeThreshold: 10m
          resourceDiffPercentage: 20
          trigger: "On"
      databaseRef:
        name: sample
      opsRequestOptions:
        apply: IfReady
        timeout: 10m
  catalogAppscodeComPostgresBinding: # +doc-gen:break
    apiVersion: catalog.appscode.com/v1alpha1
    kind: PostgresBinding
    metadata:
      name: postgres
      namespace: demo
    spec:
      sourceRef:
        name: postgres
        namespace: demo
  certManagerIoIssuer_ca: # +doc-gen:break
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: postgres-ca
      namespace: demo
    spec:
      ca:
        secretName: postgres-ca
  coreKubestashComBackupBlueprint: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: BackupBlueprint
    metadata:
      name: postgres
      namespace: demo
    spec:
      backupConfigurationTemplate:
        backends:
          - name: postgres-backend
            retentionPolicy:
              name: postgres-retention-policy
              namespace: demo
            storageRef:
              name: postgres-storage
              namespace: demo
        sessions:
          - addon:
              jobTemplate:
                spec:
                  securityContext:
                    runAsGroup: 0
                    runAsUser: 0
              name: postgres-addon
              tasks:
                - name: logical-backup
            name: postgres-frequent-backup
            repositories:
              - backend: postgres-backend
                directory: /postgres-repo
                encryptionSecret:
                  name: postgres-encryption-secret
                  namespace: demo
                name: postgres-repo
            scheduler:
              jobTemplate:
                backoffLimit: 1
              schedule: '*/5 * * * *'
            sessionHistoryLimit: 2
      usagePolicy:
        allowedNamespaces:
          from: Same
  coreKubestashComBackupConfiguration: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: BackupConfiguration
    metadata:
      name: postgres
      namespace: demo
    spec:
      backends:
        - name: postgres-backend
          retentionPolicy:
            name: postgres-retention-policy
            namespace: demo
          storageRef:
            name: postgres-storage
            namespace: demo
      sessions:
        - addon:
            jobTemplate:
              spec:
                securityContext:
                  runAsGroup: 0
                  runAsUser: 0
            name: postgres-addon
            tasks:
              - name: logical-backup
          name: postgres-frequent-backup
          repositories:
            - backend: postgres-backend
              directory: /postgres-repo
              encryptionSecret:
                name: postgres-encryption-secret
                namespace: demo
              name: postgres-repo
          scheduler:
            jobTemplate:
              backoffLimit: 1
            schedule: '*/5 * * * *'
          sessionHistoryLimit: 2
      target:
        apiGroup: kubedb.com
        kind: Postgres
        name: postgres
        namespace: demo
  coreKubestashComRestoreSession: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: RestoreSession
    metadata:
      name: postgres
      namespace: demo
    spec:
      addon:
        jobTemplate:
          spec:
            securityContext:
              runAsGroup: 0
              runAsUser: 0
        name: postgres-addon
        tasks:
          - name: logical-backup-restore
      dataSource:
        encryptionSecret:
          name: postgres-encryption-secret
          namespace: demo
        repository: postgres-repo
        snapshot: latest
      target:
        apiGroup: kubedb.com
        kind: Postgres
        name: postgres
        namespace: demo
  kubedbComPostgres: # +doc-gen:break
    apiVersion: kubedb.com/v1
    kind: Postgres
    metadata:
      name: postgres
      namespace: demo
    spec:
      authSecret:
        name: postgres-auth
      clientAuthMode: scram
      configSecret:
        name: postgres-config
      deletionPolicy: WipeOut
      init:
        waitForInitialRestore: true
      leaderElection:
        electionTick: 10
        heartbeatTick: 1
        maximumLagBeforeFailover: 33554432
        period: 100ms
      monitor:
        agent: prometheus.io
        prometheus:
          exporter:
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 100m
                memory: 128Mi
      podTemplate:
        spec:
          containerSecurityContext:
            privileged: false
            runAsGroup: 1000620000
            runAsUser: 1000620000
      sslMode: verify-full
      standbyMode: Hot
      storage:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard
      storageType: Durable
      tls:
        issuerRef:
          apiGroup: cert-manager.io
          kind: Issuer
          name: postgres-ca
      version: 13.2-debian
  monitoringCoreosComServiceMonitor: # +doc-gen:break
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: postgres
      namespace: demo
    spec:
      endpoints:
        - honorLabels: true
          interval: 30s
          path: /metrics
          port: metrics
      namespaceSelector:
        matchNames:
          - demo
      selector:
        matchLabels:
          app.kubernetes.io/instance: postgres
          app.kubernetes.io/name: postgreses.kubedb.com
  secret_auth: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: postgres-auth
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: postgres
    type: Opaque
  secret_config: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: postgres-config
      namespace: demo
    stringData:
      user.conf: |
        max_connections=110
        shared_buffers=258MB
    type: Opaque
  secret_encryption_secret: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: postgres-encryption-secret
      namespace: demo
    stringData:
      RESTIC_PASSWORD: ""
  secret_init_repo_cred: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: postgres-init-repo-cred
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: postgres
    type: Opaque
  secret_repo_cred: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: postgres-repo-cred
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: postgres
    type: Opaque
  stashAppscodeComBackupConfiguration: # +doc-gen:break
    apiVersion: stash.appscode.com/v1beta1
    kind: BackupConfiguration
    metadata:
      name: postgres
      namespace: demo
    spec:
      repository:
        name: postgres-init-repo
      retentionPolicy:
        keepLast: 5
        name: keep-last-5
        prune: true
      schedule: '*/2 * * * *'
      target:
        ref:
          apiVersion: appcatalog.appscode.com/v1alpha1
          kind: AppBinding
          name: postgres
  stashAppscodeComRepository_init_repo: # +doc-gen:break
    apiVersion: stash.appscode.com/v1alpha1
    kind: Repository
    metadata:
      name: postgres-init-repo
      namespace: demo
    spec:
      backend:
        gcs:
          bucket: stash-testing
          prefix: /demo/postgres
        storageSecretName: gcs-secret
  stashAppscodeComRepository_repo: # +doc-gen:break
    apiVersion: stash.appscode.com/v1alpha1
    kind: Repository
    metadata:
      name: postgres-repo
      namespace: demo
    spec:
      backend:
        gcs:
          bucket: stash-testing
          prefix: /demo/postgres
        storageSecretName: gcs-secret
  stashAppscodeComRestoreSession_init: # +doc-gen:break
    apiVersion: stash.appscode.com/v1beta1
    kind: RestoreSession
    metadata:
      name: postgres-init
      namespace: demo
    spec:
      repository:
        name: postgres-init-repo
      rules:
        - snapshots:
            - latest
      target:
        ref:
          apiVersion: appcatalog.appscode.com/v1alpha1
          kind: AppBinding
          name: postgres
