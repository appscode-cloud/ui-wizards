form:
  alert:
    additionalRuleLabels: {}
    annotations: {}
    enabled: warning
    groups:
      database:
        enabled: warning
        rules:
          redisDisconnectedSlaves:
            duration: 2m
            enabled: true
            severity: warning
            val: 1
          redisDown:
            duration: 0m
            enabled: true
            severity: critical
          redisMissingMaster:
            duration: 0m
            enabled: true
            severity: critical
            val: 1
          redisRejectedConnections:
            duration: 0m
            enabled: true
            severity: warning
            val: 0
          redisTooManyConnections:
            duration: 2m
            enabled: true
            severity: warning
            val: 100
          redisTooManyMasters:
            duration: 2m
            enabled: true
            severity: critical
            val: 1
      opsManager:
        enabled: warning
        rules:
          opsRequestFailed:
            duration: 0m
            enabled: true
            severity: critical
          opsRequestOnProgress:
            duration: 0m
            enabled: true
            severity: info
          opsRequestStatusProgressingToLong:
            duration: 30m
            enabled: true
            severity: critical
      provisioner:
        enabled: warning
        rules:
          appPhaseCritical:
            duration: 15m
            enabled: true
            severity: warning
          appPhaseNotReady:
            duration: 1m
            enabled: true
            severity: critical
      stash:
        enabled: warning
        rules:
          backupSessionFailed:
            duration: 0m
            enabled: true
            severity: critical
          backupSessionPeriodTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 1800
          noBackupSessionForTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 18000
          repositoryCorrupted:
            duration: 5m
            enabled: true
            severity: critical
          repositoryStorageRunningLow:
            duration: 5m
            enabled: true
            severity: warning
            val: 1.073741824e+10
          restoreSessionFailed:
            duration: 0m
            enabled: true
            severity: critical
          restoreSessionPeriodTooLong:
            duration: 0m
            enabled: true
            severity: warning
            val: 1800
    labels:
      release: prometheus
metadata:
  resource:
    group: kubedb.com
    version: v1
    name: redises
    kind: Redis
    scope: Namespaced
  release:
    name: RELEASE-NAME
    namespace: default
resources:
  autoscalingKubedbComRedisAutoscaler: # +doc-gen:break
    apiVersion: autoscaling.kubedb.com/v1alpha1
    kind: RedisAutoscaler
    metadata:
      name: redis
      namespace: demo
    spec:
      compute:
        nodeTopology:
          name: standard-basv2-family
        redis:
          maxAllowed:
            cpu: 1
            memory: 2Gi
          minAllowed:
            cpu: 400m
            memory: 400Mi
          podLifeTimeThreshold: 10m
          resourceDiffPercentage: 20
          trigger: "On"
      databaseRef:
        name: sample
      opsRequestOptions:
        apply: IfReady
        timeout: 10m
  catalogAppscodeComRedisBinding: # +doc-gen:break
    apiVersion: catalog.appscode.com/v1alpha1
    kind: RedisBinding
    metadata:
      name: redis
      namespace: demo
    spec:
      sourceRef:
        name: redis
        namespace: demo
  certManagerIoIssuer_ca: # +doc-gen:break
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: redis-ca
      namespace: demo
    spec:
      ca:
        secretName: redis-ca
  coreKubestashComBackupBlueprint: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: BackupBlueprint
    metadata:
      name: redis
      namespace: demo
    spec:
      backupConfigurationTemplate:
        backends:
          - name: redis-backend
            retentionPolicy:
              name: redis-retention-policy
              namespace: demo
            storageRef:
              name: redis-storage
              namespace: demo
        sessions:
          - addon:
              jobTemplate:
                spec:
                  containerSecurityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - ALL
                    runAsGroup: 0
                    runAsNonRoot: true
                    runAsUser: 999
                    seccompProfile:
                      type: RuntimeDefault
                  nodeSelector:
                    kubernetes.io/os: linux
              name: redis-addon
              tasks:
                - name: logical-backup
            name: redis-frequent-backup
            repositories:
              - backend: redis-backend
                directory: /redis-repo
                encryptionSecret:
                  name: redis-encryption-secret
                  namespace: demo
                name: redis-repo
            scheduler:
              failedJobsHistoryLimit: 4
              jobTemplate:
                backoffLimit: 2
                template:
                  spec:
                    containerSecurityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                      runAsGroup: 0
                      runAsNonRoot: true
                      runAsUser: 999
                      seccompProfile:
                        type: RuntimeDefault
                    nodeSelector:
                      kubernetes.io/os: linux
              schedule: 0 */2 * * *
              successfulJobsHistoryLimit: 2
            sessionHistoryLimit: 3
      usagePolicy:
        allowedNamespaces:
          from: Same
  coreKubestashComBackupConfiguration: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: BackupConfiguration
    metadata:
      name: redis
      namespace: demo
    spec:
      backends:
        - name: redis-backend
          retentionPolicy:
            name: redis-retention-policy
            namespace: demo
          storageRef:
            name: redis-storage
            namespace: demo
      sessions:
        - addon:
            jobTemplate:
              spec:
                containerSecurityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                      - ALL
                  runAsGroup: 0
                  runAsNonRoot: true
                  runAsUser: 999
                  seccompProfile:
                    type: RuntimeDefault
                nodeSelector:
                  kubernetes.io/os: linux
            name: redis-addon
            tasks:
              - name: logical-backup
          name: redis-frequent-backup
          repositories:
            - backend: redis-backend
              directory: /redis-repo
              encryptionSecret:
                name: redis-encryption-secret
                namespace: demo
              name: redis-repo
          scheduler:
            failedJobsHistoryLimit: 4
            jobTemplate:
              backoffLimit: 2
              template:
                spec:
                  containerSecurityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - ALL
                    runAsGroup: 0
                    runAsNonRoot: true
                    runAsUser: 999
                    seccompProfile:
                      type: RuntimeDefault
                  nodeSelector:
                    kubernetes.io/os: linux
            schedule: 0 */2 * * *
            successfulJobsHistoryLimit: 2
          sessionHistoryLimit: 3
      target:
        apiGroup: kubedb.com
        kind: Redis
        name: redis
        namespace: demo
  coreKubestashComRestoreSession: # +doc-gen:break
    apiVersion: core.kubestash.com/v1alpha1
    kind: RestoreSession
    metadata:
      name: redis
      namespace: demo
    spec:
      addon:
        containerRuntimeSettings:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 999
            seccompProfile:
              type: RuntimeDefault
        jobTemplate:
          spec:
            nodeSelector:
              kubernetes.io/os: linux
            securityContext:
              runAsGroup: 0
              runAsUser: 999
        name: redis-addon
        tasks:
          - name: logical-backup-restore
      dataSource:
        encryptionSecret:
          name: redis-encryption-secret
          namespace: demo
        repository: redis-repo
        snapshot: latest
      target:
        apiGroup: kubedb.com
        kind: Redis
        name: redis
        namespace: demo
  kubedbComRedis: # +doc-gen:break
    apiVersion: kubedb.com/v1
    kind: Redis
    metadata:
      name: redis
      namespace: demo
    spec:
      authSecret:
        name: redis-auth
      configSecret:
        name: redis-config
      deletionPolicy: WipeOut
      init:
        waitForInitialRestore: true
      mode: Sentinel
      monitor:
        agent: prometheus.io
        prometheus:
          exporter:
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 100m
                memory: 128Mi
      replicas: 3
      sentinelRef:
        name: sentinel
        namespace: demo
      storage:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard
      tls:
        issuerRef:
          apiGroup: cert-manager.io
          kind: Issuer
          name: redis-ca
      version: 6.2.5
  kubedbComRedisSentinel_sentinel: # +doc-gen:break
    apiVersion: kubedb.com/v1
    kind: RedisSentinel
    metadata:
      name: sentinel
      namespace: demo
    spec:
      deletionPolicy: WipeOut
      replicas: 3
      storage:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard
      storageType: Durable
      version: 6.2.5
  monitoringCoreosComServiceMonitor: # +doc-gen:break
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: redis
      namespace: demo
    spec:
      endpoints:
        - honorLabels: true
          interval: 30s
          path: /metrics
          port: metrics
      namespaceSelector:
        matchNames:
          - demo
      selector:
        matchLabels:
          app.kubernetes.io/instance: redis
          app.kubernetes.io/name: redises.kubedb.com
  secret_auth: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: redis-auth
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: root
    type: Opaque
  secret_config: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: redis-config
      namespace: demo
    stringData:
      redis.conf: |
        databases 10
        maxclients 500
    type: Opaque
  secret_encryption_secret: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: redis-encryption-secret
      namespace: demo
    stringData:
      RESTIC_PASSWORD: ""
  secret_init_repo_cred: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: redis-init-repo-cred
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: root
    type: Opaque
  secret_repo_cred: # +doc-gen:break
    apiVersion: v1
    kind: Secret
    metadata:
      name: redis-repo-cred
      namespace: demo
    stringData:
      password: thisIs1StrongPassword
      username: root
    type: Opaque
  stashAppscodeComBackupConfiguration: # +doc-gen:break
    apiVersion: stash.appscode.com/v1beta1
    kind: BackupConfiguration
    metadata:
      name: redis
      namespace: demo
    spec:
      repository:
        name: redis-repo
      retentionPolicy:
        keepLast: 5
        name: keep-last-5
        prune: true
      schedule: '*/2 * * * *'
      target:
        ref:
          apiVersion: appcatalog.appscode.com/v1alpha1
          kind: AppBinding
          name: redis
  stashAppscodeComRepository_init_repo: # +doc-gen:break
    apiVersion: stash.appscode.com/v1alpha1
    kind: Repository
    metadata:
      name: redis-init-repo
      namespace: demo
    spec:
      backend:
        gcs:
          bucket: stash-testing
          prefix: /demo/redis
        storageSecretName: gcs-secret
  stashAppscodeComRepository_repo: # +doc-gen:break
    apiVersion: stash.appscode.com/v1alpha1
    kind: Repository
    metadata:
      name: redis-repo
      namespace: demo
    spec:
      backend:
        gcs:
          bucket: stash-testing
          prefix: /demo/redis
        storageSecretName: gcs-secret
  stashAppscodeComRestoreSession_init: # +doc-gen:break
    apiVersion: stash.appscode.com/v1beta1
    kind: RestoreSession
    metadata:
      name: redis-init
      namespace: demo
    spec:
      repository:
        name: redis-init-repo
      rules:
        - snapshots:
            - latest
      target:
        ref:
          apiVersion: appcatalog.appscode.com/v1alpha1
          kind: AppBinding
          name: redis
