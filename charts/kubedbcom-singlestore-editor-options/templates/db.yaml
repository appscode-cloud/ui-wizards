{{- $machines := .Files.Get "data/machines.yaml" | fromYaml -}}
{{- $res := dict -}}
{{- $aggregator_res := dict -}}
{{- $leaf_res := dict -}}
{{- if eq .Values.spec.mode "Topology" }}
  {{- $aggregator_res = .Values.spec.topology.aggregator.podResources.resources -}}
  {{- if and .Values.spec.topology.aggregator.podResources.machine (hasKey $machines .Values.spec.topology.aggregator.podResources.machine) }}
    {{- $aggregator_res = get (get $machines .Values.spec.topology.aggregator.podResources.machine) "resources" }}
  {{- end }}
  {{- $leaf_res = .Values.spec.topology.leaf.podResources.resources -}}
  {{- if and .Values.spec.topology.leaf.podResources.machine (hasKey $machines .Values.spec.topology.leaf.podResources.machine) }}
    {{- $leaf_res = get (get $machines .Values.spec.topology.leaf.podResources.machine) "resources" }}
  {{- end }}
{{- else }}
  {{- $res = .Values.spec.podResources.resources -}}
  {{- if and .Values.spec.podResources.machine (hasKey $machines .Values.spec.podResources.machine) }}
    {{- $res = get (get $machines .Values.spec.podResources.machine) "resources" }}
  {{- end }}
{{- end }}
{{ $poolName := printf "%s-%s-%s" .Values.form.capi.clusterName .Release.Namespace (include "kubedbcom-singlestore-editor-options.fullname" .) }}

apiVersion: kubedb.com/v1alpha2
kind: Singlestore
metadata:
  name: {{ include "kubedbcom-singlestore-editor-options.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kubedbcom-singlestore-editor-options.labels" . | nindent 4 }}
{{- if .Values.spec.annotations }}
  annotations:
    {{- include "kubedbcom-singlestore-editor-options.annotations" . | nindent 4 }}
{{- end }}
spec:
  version: {{ .Values.spec.version | quote }}
{{- if eq .Values.spec.mode "Topology" }}
  topology:
    aggregator:
      replicas: {{ .Values.spec.topology.aggregator.replicas }}
      storage:
        storageClassName: {{ .Values.spec.storageClass.name }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.spec.topology.aggregator.persistence.size }}
      podTemplate:
        spec:
          containers:
            - name: singlestore
              resources:
                {{- toYaml $aggregator_res | nindent 16 }}
          {{- if and .Values.form.capi.provider .Values.form.capi.dedicated }}
          nodeSelector:
            nodes.klusters.dev/pool: {{ $poolName }}
          tolerations:
            - key: dedicated
              operator: "Equal"
              value: "true"
              effect: "NoSchedule"
          {{- end }}
    leaf:
      replicas: {{ .Values.spec.topology.leaf.replicas }}
      storage:
        storageClassName: {{ .Values.spec.storageClass.name }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.spec.topology.leaf.persistence.size }}
      podTemplate:
        spec:
          containers:
            - name: singlestore
              resources:
                {{- toYaml $leaf_res | nindent 16 }}
          {{- if and .Values.form.capi.provider .Values.form.capi.dedicated }}
          nodeSelector:
            nodes.klusters.dev/pool: {{ $poolName }}
          tolerations:
            - key: dedicated
              operator: "Equal"
              value: "true"
              effect: "NoSchedule"
          {{- end }}
{{- else if eq .Values.spec.mode "Standalone" }}
  replicas: 1
  storage:
    storageClassName: {{ .Values.spec.storageClass.name }}
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: {{ .Values.spec.persistence.size }}
  podTemplate:
    spec:
      containers:
        - name: singlestore
          resources:
            {{- toYaml $res | nindent 12 }}
      {{- if and .Values.form.capi.provider .Values.form.capi.dedicated }}
      nodeSelector:
        nodes.klusters.dev/pool: {{ $poolName }}
      tolerations:
        - key: dedicated
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      {{- end }}
{{- end }}
  storageType: Durable
  terminationPolicy: {{ .Values.spec.terminationPolicy }}
{{- if .Values.spec.authSecret.name }}
  authSecret:
    name: {{ .Values.spec.authSecret.name }}
{{- end }}
{{- if (and .Values.spec.monitoring .Values.spec.monitoring.agent) }}
  monitor:
    agent: {{ .Values.spec.monitoring.agent }}
    prometheus:
    {{- with .Values.spec.monitoring.exporter }}
      exporter:
        resources:
          {{- toYaml .resources | nindent 10 }}
    {{- end }}
      serviceMonitor:
        interval: 30s
        labels:
          {{- toYaml .Values.spec.monitoring.serviceMonitor.labels | nindent 10 }}
{{- end }}
